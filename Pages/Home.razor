@page "/"
@using PassGen.models
@inject IJSRuntime JSRuntime

<PageTitle>Password Generator</PageTitle>


<div class="app-container">
    <div class="app-header">
        <h1>🔑 Password Generator 🔒</h1>
        <div class="password-field">
            <span>@ResultPassword</span>
            <svg @onclick="CopyTextToClipboard" class="copy-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                width="24" height="24" color="#000000" fill="none">
                <path
                    d="M9 15C9 12.1716 9 10.7574 9.87868 9.87868C10.7574 9 12.1716 9 15 9L16 9C18.8284 9 20.2426 9 21.1213 9.87868C22 10.7574 22 12.1716 22 15V16C22 18.8284 22 20.2426 21.1213 21.1213C20.2426 22 18.8284 22 16 22H15C12.1716 22 10.7574 22 9.87868 21.1213C9 20.2426 9 18.8284 9 16L9 15Z"
                    stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                <path
                    d="M16.9999 9C16.9975 6.04291 16.9528 4.51121 16.092 3.46243C15.9258 3.25989 15.7401 3.07418 15.5376 2.90796C14.4312 2 12.7875 2 9.5 2C6.21252 2 4.56878 2 3.46243 2.90796C3.25989 3.07417 3.07418 3.25989 2.90796 3.46243C2 4.56878 2 6.21252 2 9.5C2 12.7875 2 14.4312 2.90796 15.5376C3.07417 15.7401 3.25989 15.9258 3.46243 16.092C4.51121 16.9528 6.04291 16.9975 9 16.9999"
                    stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
            </svg>
        </div>
    </div>

    <div class="app-body">
        <div class="char-length">
            <span>Character Length</span>
            <input type="number" @bind="password.PasswordLength">
        </div>

        <div class="options-section">
            <div class="">
                <label for="includeUppercase"></label>
                <input type="checkbox" name="includeUppercase" @bind="password.IncludeUppercase" /> Include Uppercase
            </div>
            <label for="">
                <input type="checkbox" @bind="@password.IncludeLowercase" /> Include Lowercase
            </label>
            <label for="">
                <input type="checkbox" @bind="@password.IncludeNumbers" /> Include Numbers
            </label>
            <label for="">
                <input type="checkbox" @bind="@password.IncludeSymbols" /> Include Symbols
            </label>
        </div>

        <div class="password-strength">
            <span>Strength</span>
            <div class="strength-indicator">
                <span class="strength-pill"></span>
                <span class="strength-pill"></span>
                <span class="strength-pill"></span>
                <span class="strength-pill"></span>
            </div>
        </div>

        <button @onclick="Generatepassword">Generate</button>
    </div>
</div>

@code {
    private string ResultPassword = "P4$5w0orD";
    private PasswordBuilder passwordBuilder = new PasswordBuilder();
    private Password password = new Password();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Console.WriteLine("OnInitialized");
    }

    private void Generatepassword()
    {
        passwordBuilder
        .IncludeLowercase(password.IncludeLowercase)
        .IncludeUppercase(password.IncludeUppercase)
        .IncludeNumbers(password.IncludeNumbers)
        .IncludeSymbols(password.IncludeSymbols)
        .SetPasswordLength(password.PasswordLength);

        ResultPassword = passwordBuilder.Build().PasswordString;
    }

    private string GetPasswordStrengthColor(Password password)
    {
        int passwordStrength = 0;

        if (password.PasswordLength > 8)
        {
            passwordStrength += 1;
        }

        if (password.IncludeUppercase)
        {
            passwordStrength += 1;
        }

        if (password.IncludeNumbers)
        {
            passwordStrength += 1;
        }

        if (password.IncludeSymbols)
        {
            passwordStrength += 1;
        }

        return passwordStrength switch
        {
            >= 4 => "Green",
            >= 3 => "Yellow",
            >= 2 => "Organge",
            _ => "Red"
        };
    }

    private async Task CopyTextToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", ResultPassword);
    }
}

<script>
    window.clipboardCopy = {
        copyText: function (text) {
            navigator.clipboard.writeText(text).then(function () {
                console.log("Copied to clipboard: ", text);
            })
                .catch(function (error) {
                    console.log(error);
                });
        }
    };
</script>